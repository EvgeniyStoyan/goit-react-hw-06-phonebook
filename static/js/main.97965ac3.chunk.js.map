{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/phonebook/contacts-actions.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","redux/phonebook/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","connect","contacts","items","dispatch","onDeleteContact","contactsActions","className","s","contacts_list","map","item","contact_text","type","onClick","onSubmit","useState","setName","setNumber","nameInputId","numberInputId","handleChange","event","currentTarget","value","reset","container_form","e","preventDefault","form","htmlFor","label_text","input_form","onChange","pattern","title","required","button_form","state","target","label_filter","input_filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.97965ac3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts_list\":\"ContactList_contacts_list__3HBYV\",\"item\":\"ContactList_item__1rSGX\",\"contact_text\":\"ContactList_contact_text__2QBet\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label_filter\":\"Filter_label_filter__2Gv3G\",\"input_filter\":\"Filter_input_filter__3-D9i\"};","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n// import types from './contacts-types';\r\n\r\nexport const addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\n// export default { addContact, deleteContact, changeFilter };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/phonebook/contacts-actions';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <div>\r\n      <ul className={s.contacts_list}>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li className={s.item} key={id}>\r\n            <p className={s.contact_text}>\r\n              {name}: {number}\r\n            </p>\r\n            <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/phonebook/contacts-actions';\r\nimport shortid from 'shortid';\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit(name, number);\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(name => (name = ''));\r\n    setNumber(number => (number = ''));\r\n  };\r\n\r\n  return (\r\n    <div className={s.container_form}>\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <label htmlFor={nameInputId} className={s.label_text}>\r\n          Name\r\n          <input\r\n            className={s.input_form}\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            id={nameInputId}\r\n          />\r\n        </label>\r\n        <label htmlFor={numberInputId} className={s.label_text}>\r\n          Number\r\n          <input\r\n            className={s.input_form}\r\n            type=\"tel\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            id={numberInputId}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className={s.button_form}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(contactsActions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/phonebook/contacts-actions';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div>\r\n    <label className={s.label_filter}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        className={s.input_filter}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import React, { useState, useEffect } from 'react';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\n// import shortid from 'shortid';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n// import types from './contacts-types';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","// import { combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from '../redux/phonebook/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport * as store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container_form\":\"ContactForm_container_form__1qmVk\",\"form\":\"ContactForm_form__1yRhQ\",\"label_text\":\"ContactForm_label_text__AbL87\",\"input_form\":\"ContactForm_input_form__3_BLT\"};"],"sourceRoot":""}